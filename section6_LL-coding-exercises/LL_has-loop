class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        
class LinkedList:
    def __init__(self, value):
        new_node = Node(value)
        self.head = new_node
        self.tail = new_node
        self.length = 1

    def append(self, value):
        new_node = Node(value)
        if self.length == 0:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node
        self.length += 1
        return True

    # WRITE HAS_LOOP METHOD HERE #
    #                            #
    #                            #
    #                            #
    #                            #
    ##############################

    # def has_loop(self):
    #     fast = self.head
    #     slow = self.head
    #     while fast is not None and fast.next is not None:
    #         slow = slow.next
    #         fast = fast.next.next
    #         if slow == fast:
    #             return True
    #         return False

    # def has_loop(self):
    #     fast = self.head
    #     slow = self.head
    #     while fast is not None and fast.next is not None:
    #         slow = slow.next
    #         fast = fast.next.next
    #         if slow == fast:
    #             return True
    #         return False

    def has_loop(self):
        fast = self.head
        slow = self.head
        while fast is not None and fast.next is not None:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True
            return False


# explanation:
# The has_loop method uses the Floyd's Cycle-Finding Algorithm (Tortoise and Hare algorithm).
# It uses two pointers, slow and fast. The slow pointer moves one step at a time    
# while the fast pointer moves two steps at a time. If there is a loop, the fast pointer will eventually meet the slow pointer.


# Pseudo Code:

# initialize slow and fast pointers to head of the list



# while fast is not None and fast.next is not None:

#     move slow pointer one step forward

#     move fast pointer two steps forward



#     if slow and fast pointers are equal:

#         return True (loop found)



# return False (loop not found)
    
    
    
my_linked_list_1 = LinkedList(1)
my_linked_list_1.append(2)
my_linked_list_1.append(3)
my_linked_list_1.append(4)
my_linked_list_1.tail.next = my_linked_list_1.head
print(my_linked_list_1.has_loop() ) # Returns True




my_linked_list_2 = LinkedList(1)
my_linked_list_2.append(2)
my_linked_list_2.append(3)
my_linked_list_2.append(4)
print(my_linked_list_2.has_loop() ) # Returns False



"""
    EXPECTED OUTPUT:
    ----------------
    True
    False
    
"""
